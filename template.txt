#include<bits/stdc++.h>
// #include <ext/pb_ds/tree_policy.hpp>
// #include <ext/pb_ds/assoc_container.hpp>
using namespace std;
// using namespace __gnu_pbds;
#define int long long
#define ar array
#define ld long double  
#define f first
#define sc second
#define endl '\n'
#define all(x) x.begin(), x.end()
#define lcm(x, y)(x * y) / (__gcd(x, y))
#define sz(t)(int)(t.size())
template <typename T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
#define debug(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
     cerr << *it << " = " << a << endl;
     err(++it, args...);
}
//template <class T> using tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

int32_t main() {

}